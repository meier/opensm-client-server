############################################################
#       Default OSM Client Configuration File
#
# This file satisfies the configuration requirement for;
#
#  AuthenticationProperties
#  NetworkProperties
#  KeyStoreProperties
#  logging.config
#
# All of the default properties for the above are included
# here in this single file.  This means that you can
# specify this same file for all FOUR system properties.
# Of course you can use a different file by specifying
# a filename with one of the system properties.
# For example java -DNetworkProperties.file=/home/meier3/JavaProperties/corni/Network.properties
# -- or --
# java -DKeyStoreProperties.file=/home/meier3/JavaProperties/corni/KeyStore.properties
# -- or --
# java -DAuthenticationProperties.file=/home/meier3/JavaProperties/corni/Authentication.properties
#
# In ALL cases, the properties in the Server and Client files
# must match or have the correct client/server relationship.
############################################################

############################################################
# Network properties.
#
# Both Client and Server must use the same network properties.
# The default protocol is a special form of a serialized java object.
#
# The ServiceHost.name is used only by clients, and its
# value is initially set to "localhost", but normally should
# point to a remote host that runs the service.
############################################################
Server.SerialObjectProtocol.classname=gov.llnl.lc.infiniband.opensm.plugin.net.OsmObjectProtocol
ServiceHost.name=localhost
Service.name=OsmMonitor
Service.portNumber=10011
Socket.timeout=300000

############################################################
# Authentication properties.
#
# This is a sample Authentication.properties file for use with 
# Authentication classes and/or AuthenticationResponder classes.
#
# Authentication classes are intended for the servers, and provide
# their half of the authentication handshake.
#
# AuthenticationResponder classes are intended for client applications,
# and respond the the servers authentication queries.
#
# Additionally, the Server can be configured to automatically authenticate
# local clients.  This is useful for non-interactive local sessions.
#
# There are currently three forms of Authentication supported, Session,LdapOtp
# and Password.  Entries in this file allow the authentication system
# to be configured at runtime.  The server and all clients should be
# configured to use the same authentication mechanisms.
#
# Since this file may contain a password, it's access should be controlled
# accordingly.
#
# Typically, the Authentication system would know to use this settings in
# this file by providing the system parameter at startup, via;
#
# "-DAuthenticationProperties.file=/path/Authentication.properties"
#
# For use with Password Authentication
#Authentication.password=knocknock
#Authenticator.classname=gov.llnl.lc.security.PasswordAuthenticator
#AuthenticationResponder.classname=gov.llnl.lc.security.PasswordAuthenticationResponder
#
# For use with Ldap/Otp Authentication
#Authenticator.classname=gov.llnl.lc.security.LdapOtpAuthenticator
#AuthenticationResponder.classname=gov.llnl.lc.security.LdapOtpAuthenticationResponder
#
# For use with Session Authentication which is a special form of Ldap/Otp authentication
# which will auto authenticate its children sessions.
############################################################
#Authenticator.classname=gov.llnl.lc.security.SessionAuthenticator
AuthenticationResponder.classname=gov.llnl.lc.security.SessionAuthenticationResponder
#
############################################################
# Should the Server allow local clients, without the need for acc/pw?
#Authenticator.localhost.allow=true
#
############################################################
# KeyStore properties.
#
# These client-side keystore properties will need to be changed
# once the clients keystore is established.  Normally, the
# keystore is located in the users home directory using ".keystore"
# filename.  The keystore passcode is necessary to read/write
# to the keystore.
#
# Alternately, you can leave the key/value pairs (below) commented
# out and pass in the following command line arguments;
#
# -Djavax.net.ssl.keyStore=<path to keystore file>
# -Djavax.net.ssl.keyStorePassword=<keystore password>
#
############################################################
KeyStore.client.file=/etc/opensm-plugin/OsmClientKeystore
KeyStore.client.passcode=client

############################################################
#       Default OSM Java Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
#
# the ConsoleHandler will often be routed to syslog, or in the
# case of opensm, it will go to /var/log/opensm.log
#handlers= java.util.logging.ConsoleHandler

# To log using the FileHandler, use the following line instead.
handlers= java.util.logging.FileHandler

# To log to both, use the following line.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

############################################################
# Log Level
#   SEVERE (highest)
#   WARNING
#   INFO
#   CONFIG
#   FINE
#   FINER
#   FINEST
#
# In addition to that you have also the levels OFF and ALL to turn the logging of or to log everything.
############################################################
# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level= INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.  Defined by
# the system property user.home
java.util.logging.FileHandler.pattern = %h/OsmClient%u.log
java.util.logging.FileHandler.limit = 50000
java.util.logging.FileHandler.count = 1
#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
java.util.logging.FileHandler.level = ALL
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Limit the message that are printed on the console to INFO and above.
#java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
#
############################################################
# Facility specific properties.
# Provides extra control for each logger.
#
# (each class logger writes to OsmClient.log.1 )
############################################################
#
# For example, set the gov.llnl.lc.infiniband.opensm.plugin.net.OsmEventInterface
# logger to log ALL messages:
# gov.llnl.lc.infiniband.opensm.plugin.net.OsmEventInterface.level = ALL
# gov.llnl.lc.security.KeyStoreTools = ALL
